#include "Random.h" // defines Random::mt, Random::get(), and Random::generate()
#include <iostream>
#include <random>
// The internal state of a Mersenne Twister is 624 bytes in size. In the examples above, where we
// seed from the clock or std::random_device, our seed is only a single 32-bit integer. This means
// we’re essentially initializing a 624-byte object with a 4-byte value, which is significantly
// underseeding the Mersenne Twister PRNG.

// std::seed_seq (which stands for “seed sequence”) : it will generate as many additional unbiased
// seed values as needed to initialize a PRNG’s state.
//  we initialize std::seed_seq with 8 numbers from std::random_device instead of 1, then the
//  remaining numbers ((624- (8*4))/4) generated by std::seed_seq should be that much better
int main() {
    std::random_device rd{};
    std::seed_seq ss{
        rd(), rd(), rd(), rd(), rd(),
        rd(), rd(), rd()}; // get 8 integers of random numbers from std::random_device for our seed
    std::mt19937 mt{ss};   // initialize our Mersenne Twister with the std::seed_seq

    // Create a reusable random number generator that generates uniform numbers between 1 and 6
    std::uniform_int_distribution die6{
        1, 6}; // for C++14, use std::uniform_int_distribution<> die6{ 1, 6 };

    // Print a bunch of random numbers
    for (int count{1}; count <= 40; ++count) {
        std::cout << die6(mt) << '\t'; // generate a roll of the die here

        // If we've printed 10 numbers, start a new row
        if (count % 10 == 0)
            std::cout << '\n';
    }
    std::cout << "\n using Random.h" << '\n';

    // using Random.h
    // We can use Random::get() to generate random numbers

    std::cout << Random::get(1, 6) << '\n';   // returns int between 1 and 6
    std::cout << Random::get(1u, 6u) << '\n'; // returns unsigned int between 1 and 6

    // The following uses a template type argument
    // See https://www.learncpp.com/cpp-tutorial/function-template-instantiation/
    std::cout << Random::get<std::size_t>(1, 6u) << '\n'; // returns std::size_t between 1 and 6

    // We can access Random::mt directly if we have our own distribution

    // Create a reusable random number generator that generates uniform numbers between 1 and 6
    std::uniform_int_distribution die6_2{
        1, 6}; // for C++14, use std::uniform_int_distribution<> die6_2{ 1, 6 };

    // Print a bunch of random numbers
    for (int count{1}; count <= 10; ++count) {
        // We can also directly access Random::mt
        std::cout << die6_2(Random::mt) << '\t'; // generate a roll of the die here
    }

    std::cout << '\n';

    return 0;
}